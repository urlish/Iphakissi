angular.module('roots.controllers')

.controller('AboutCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicScrollDelegate", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicScrollDelegate) {



}]);

angular.module('roots.controllers')

.controller('AuthCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicModal", "$ionicPopup", "$ionicLoading", "$location", "User", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicModal, $ionicPopup, $ionicLoading, $location, User) {

	$scope.modalTitle = 'Login';
	$scope.forgotMode = false;

	$scope.loginData = {};
	$scope.signupData = {};

	$ionicModal.fromTemplateUrl('templates/auth.login.html', {
		scope: $scope
	}).then(function(modal) {
		$scope.loginModal = modal;
	});

	$ionicModal.fromTemplateUrl('templates/auth.signup.html', {
		scope: $scope
	}).then(function(modal) {
		$scope.signupModal = modal;
	});

	$scope.changeToForgot = function(){
		$scope.modalTitle = 'Forgot Password';
		$scope.forgotMode = true;
	};

	$scope.changeToLogin = function(){
		$scope.modalTitle = 'Login';
		$scope.forgotMode = false;
	};

	$scope.closeLogin = function() {
		$scope.loginModal.hide();
		$scope.changeToLogin();
	};

	$scope.openLogin = function() {
		$scope.loginModal.show();
	};

	$scope.doLogin = function() {

		var nonce;

		if($scope.loginData.username!=='' && $scope.loginData.password!==''){

			$ionicLoading.show({
				template: 'Loading...'
			});

			User.getAuthNonce().success(function(response){

				if(response.status==='ok'){
          			nonce = response.nonce;          

          			User.login(nonce, $scope.loginData.username, $scope.loginData.password).success(function(response){
						
						if(response.status==='ok'){
							$ionicLoading.hide();
							$scope.loginModal.hide();
							$localstorage.set("token", response.cookie);
							User.set(response.user);
							$rootScope.$broadcast('user.login');
							$location.path('/app/home');
						} else {
							$ionicLoading.hide();
							$ionicPopup.alert({
								title: 'Error',
								template: "Your username/password was incorrect, please try again."
							});
						}

					}).error(function(response){
						$ionicLoading.hide();
						$ionicPopup.alert({
							title: 'Error',
							template: "There was an error connecting to the server, please try again later."
						});
					});

          		} else {
          			$ionicLoading.hide();
          			$ionicPopup.alert({
						title: 'Error',
						template: "There was an error connecting to the server, please try again later."
					});
          		}

			}).error(function(){
				$ionicLoading.hide();
				$ionicPopup.alert({
					title: 'Error',
					template: "There was an error connecting to the server, please try again later."
				});
			});
		
		} else {
			$ionicPopup.alert({
				title: 'Error',
				template: "You can't leave any fields empty."
			});
		}		
	};

	$scope.retrievePassword = function(){
		
		if($scope.loginData.username!==''){

			$ionicLoading.show({
				template: 'Loading...'
			});

			User.forgotPassword($scope.loginData.username).success(function(response){
				
				$ionicLoading.hide();
				$ionicPopup.alert({
					title: 'Success!',
					template: "A link for password reset has been emailed to you. Please check your email."
				});

			}).error(function(response){
				$ionicLoading.hide();
				$ionicPopup.alert({
					title: 'Error',
					template: "There was an error connecting to the server, please try again later."
				});
			});
		} else {
			$ionicLoading.hide();
			$ionicPopup.alert({
				title: 'Error',
				template: "Please enter your username"
			});
		}		

	};


	$scope.closeSignup = function() {
		$scope.signupModal.hide();
	};

	$scope.openSignup = function() {
		$scope.signupModal.show();
	};

	$scope.doSignup = function(form){

		if(form.$valid) {			

			$ionicLoading.show({
				template: 'Loading...'
			});

			User.getRegisterNonce().success(function(response){

				if(response.status==='ok'){
          			nonce = response.nonce;          

          			User.register(nonce, $scope.signupData.name, $scope.signupData.username, $scope.signupData.email, $scope.signupData.password ).success(function(response){

          				if(response.status==='ok'){

          					$localstorage.set("token", response.cookie);

          					User.getInfo( response.user_id ).success(function(response){

          						if(response.status==='ok'){

          							$ionicLoading.hide();
									$scope.signupModal.hide();
									response.username = $scope.signupData.username;
									response.email = $scope.signupData.email;		
									User.set(response);
									$rootScope.$broadcast('user.login');
									$location.path('/app/home');

          						} else {
          							$ionicLoading.hide();
									$ionicPopup.alert({
										title: 'Error',
										template: "There was an error connecting to the server, please try again later."
									});
          						}

          					}).error(function(){
          						$ionicLoading.hide();
								$ionicPopup.alert({
									title: 'Error',
									template: "There was an error connecting to the server, please try again later."
								});
          					});
          					

          				} else if (response.status ==='error') {

          					$ionicLoading.hide();
          					$ionicPopup.alert({
								title: 'Error',
								template: response.error
							});

          				}

          			}).error(function(){
          				$ionicLoading.hide();
						$ionicPopup.alert({
							title: 'Error',
							template: "There was an error connecting to the server, please try again later."
						});
          			});

          		}

          	}).error(function(){
          		$ionicLoading.hide();
				$ionicPopup.alert({
					title: 'Error',
					template: "There was an error connecting to the server, please try again later."
				});
  			});

		} else {
			$ionicPopup.alert({
				title: 'Error',
				template: "You can't leave any fields empty."
			});
		}
			
	};

}]);
angular.module('roots.controllers')

.controller('BookmarkCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicScrollDelegate", "Bookmark", "Post", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicScrollDelegate, Bookmark, Post) {

	$scope.posts = Bookmark.all();

	$scope.deleteBookmark = function(id){
		Bookmark.deleteById(id);	
		$scope.posts = Bookmark.all();	
		$ionicScrollDelegate.resize();
	};

}]);

angular.module('roots.controllers')

.controller('CategoriesGridCtrl', ["$scope", "$ionicModal", "$timeout", "$sce", "$localstorage", "Category", function($scope, $ionicModal, $timeout, $sce, $localstorage, Category) {

	$scope.categories = [];
	$scope.isFetching = true;	
	$scope.shouldRefresh = false;

	$scope.localStoragePrefix = 'category_grid_index_'; 
	$scope.useLocalStorage = true; // set to false if you don't want local storage

	$scope.loadMore = function(refresh) {

		if($scope.useLocalStorage === true && $localstorage.getObject( $scope.localStoragePrefix + 'items' ) !== null ){

			$scope.categories = $localstorage.getObject( $scope.localStoragePrefix + 'items' );
			Category.all($scope.categories);
			$scope.isFetching = false;

		} else {

			$scope.getCategories();

		}
			
	};

	$scope.getCategories = function(){
		Category.get('thumbnail').success(function(response){

			$scope.categories = response.categories;
			Category.all($scope.categories);

			$scope.isFetching = false;
			$scope.$broadcast('scroll.infiniteScrollComplete');
			
			if($scope.useLocalStorage === true){
				$localstorage.setObject($scope.localStoragePrefix + 'items', $scope.categories);
			}

			if($scope.shouldRefresh===true){
				$scope.$broadcast('scroll.refreshComplete');
				$scope.shouldRefresh = false;
			}

		});
	};

	$scope.doRefresh = function(){
		$localstorage.remove($scope.localStoragePrefix + 'items');
		$scope.categories = [];
		$scope.shouldRefresh = true;
		$scope.loadMore();		
	};

	// let's start
	$scope.loadMore();

}]);

angular.module('roots.controllers')

.controller('CategoriesCtrl', ["$scope", "$ionicModal", "$timeout", "$sce", "$localstorage", "Category", function($scope, $ionicModal, $timeout, $sce, $localstorage, Category) {

	$scope.categories = [];
	$scope.isFetching = true;	
	$scope.shouldRefresh = false;

	$scope.localStoragePrefix = 'category_index_'; 
	$scope.useLocalStorage = true; // set to false if you don't want local storage

	$scope.loadMore = function(refresh) {
		
		if($scope.useLocalStorage === true && $localstorage.getObject( $scope.localStoragePrefix + 'items' ) !== null ){

			$scope.categories = $localstorage.getObject( $scope.localStoragePrefix + 'items' );
			Category.all($scope.categories);
			$scope.isFetching = false;

		} else {

			$scope.getCategories();

		}
			
	};

	$scope.getCategories = function(){
		Category.get('full').success(function(response){

			$scope.categories = response.categories;
			Category.all($scope.categories);

			$scope.isFetching = false;
			$scope.$broadcast('scroll.infiniteScrollComplete');
			
			if($scope.useLocalStorage === true){
				$localstorage.setObject($scope.localStoragePrefix + 'items', $scope.categories);
			}

			if($scope.shouldRefresh===true){
				$scope.$broadcast('scroll.refreshComplete');
				$scope.shouldRefresh = false;
			}

		});
	};

	$scope.doRefresh = function(){
		$localstorage.remove($scope.localStoragePrefix + 'items');
		$scope.categories = [];
		$scope.shouldRefresh = true;
		$scope.loadMore();		
	};

	// let's start
	$scope.loadMore();

}]);

angular.module('roots.controllers')

.controller('CategoryArchiveCtrl', ["$scope", "$ionicModal", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicPopup", "category", "Post", "Bookmark", function($scope, $ionicModal, $timeout, $rootScope, $sce, $localstorage, $ionicPopup, category, Post, Bookmark) {

	$scope.category = category;
	$scope.posts = [];
	$scope.isFetching = true;	
	$scope.shouldRefresh = false;

	$scope.settings = {
		current_page: 1,
		total_items: 1,
		total_pages: 0
	};

	$scope.items_per_page = 3;
	$scope.localStoragePrefix = 'category_' + $scope.category.id + '_'; 
	$scope.useLocalStorage = true; // set to false if you don't want local storage

	$scope.loadMore = function(refresh) {

		if($scope.useLocalStorage === true && $localstorage.getObject( $scope.localStoragePrefix + 'settings' ) !== null ){

			$scope.posts = $localstorage.getObject( $scope.localStoragePrefix + 'items' );
			Post.all($scope.posts);
			$scope.settings = $localstorage.getObject( $scope.localStoragePrefix + 'settings' );
			$scope.isFetching = false;

			if($scope.settings.current_page < $scope.settings.total_pages){
				$scope.getPosts();
			}
		} else {
			$scope.getPosts();
		}
			
	};

	$scope.getPosts = function(){
		Post.getFromCategory($scope.category.id, $scope.settings.current_page, $scope.items_per_page).success(function(response){

			$scope.posts = $scope.posts.concat(response.posts);
			Post.all($scope.posts);

			$scope.settings.total_items = response.count_total;	
			$scope.settings.total_pages = response.pages;	
			$scope.settings.current_page++;

			$scope.isFetching = false;
			$scope.$broadcast('scroll.infiniteScrollComplete');
			
			if($scope.useLocalStorage === true){
				$localstorage.setObject($scope.localStoragePrefix + 'items', $scope.posts);
				$localstorage.setObject($scope.localStoragePrefix + 'settings', $scope.settings);
			}

			if($scope.shouldRefresh===true){
				$scope.$broadcast('scroll.refreshComplete');
				$scope.shouldRefresh = false;
			}

		});
	};

	$scope.canBeLoaded = function(){
		if($scope.settings.current_page < $scope.settings.total_pages){
			return true;
		} else {
			return false;
		}
	};

	$scope.doRefresh = function(){
		$localstorage.remove($scope.localStoragePrefix + 'items');
		$localstorage.remove($scope.localStoragePrefix + 'settings');
		$scope.posts = [];
		$scope.settings = {
			current_page: 1,
			total_items: 1,
			total_pages: 0
		};
		$scope.shouldRefresh = true;
		$scope.loadMore();		
	};

	// let's start
	$scope.loadMore();

	$scope.bookmarkThis = function(item){

		Bookmark.save(item);

		var alertPopup = $ionicPopup.alert({
			title: 'Saved!',
			template: 'You can reading it later.'
		});


	};

}]);

angular.module('roots.controllers')

.controller('ContactCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicScrollDelegate", "$http", "$ionicPopup", "$ionicLoading", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicScrollDelegate, $http, $ionicPopup, $ionicLoading) {

	$scope.contact = {};

	$scope.sendEmail = function(form) {

		if(form.$valid) {	

			$ionicLoading.show({
				template: 'Sending...'
			});

			$http({
				method  : 'POST',
				url     : 'http://dev.studio31.co/email/send-email.php',
				data    : {
					name: $scope.contact.name,
					email: $scope.contact.email,
					phone: $scope.contact.phone,
					message: $scope.contact.message
				},  // pass in data as strings
				headers : { 'Content-Type': 'application/x-www-form-urlencoded' }  // set the headers so angular passing info as form data (not request payload)
			}).success(function(data) {

				$scope.contact = {};

				$ionicLoading.hide();

				$ionicPopup.alert({
					title: 'Success',
					template: data
				});

			}).error(function(){

				$ionicLoading.hide();

				$ionicPopup.alert({
					title: 'Error',
					template: "There was an error connecting to the server, please try again."
				});

			});

		} else {
			$ionicLoading.hide();

			$ionicPopup.alert({
				title: 'Error',
				template: "Please fill in all fields."
			});
		}
			
    };

}]);

angular.module('roots.controllers')

.controller('FormsCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicScrollDelegate", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicScrollDelegate) {



}]);

angular.module('roots.controllers')

.controller('GalleryCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicSlideBoxDelegate", "$ionicModal", "Gallery", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicSlideBoxDelegate, $ionicModal, Gallery) {

	$scope.gallery_id = 1970;
	$scope.isFetching = true;
  	$scope.images = [];
  	$scope.localStoragePrefix = 'gallery_'; 
  	$scope.grid = 3;
  	$scope.useLocalStorage = true; // set to false if you don't want local storage

  	$scope.loadPhotos = function(){
  		if($scope.useLocalStorage === true && $localstorage.getObject( $scope.localStoragePrefix + 'items' ) !== null ){
			$scope.images = $localstorage.getObject( $scope.localStoragePrefix + 'items' );
			Gallery.all($scope.images);
			$scope.isFetching = false;
		} else {
			$scope.getPhotos();
		}
  	};

  	$scope.getPhotos = function(){

  		Gallery.getById($scope.gallery_id).success(function(response){

			$scope.images = response.photos;
			Gallery.all($scope.images);

			$scope.isFetching = false;
			
			if($scope.useLocalStorage === true){
				$localstorage.setObject($scope.localStoragePrefix + 'items', $scope.images);
			}

			if($scope.shouldRefresh===true){
				$scope.$broadcast('scroll.refreshComplete');
				$scope.shouldRefresh = false;
			}

		});

  	};

  	$scope.doRefresh = function(){
		$localstorage.remove($scope.localStoragePrefix + 'items');
		$scope.images = [];
		$scope.shouldRefresh = true;
		$scope.loadPhotos();		
	};

	// let's start
	$scope.loadPhotos();
  
	$ionicModal.fromTemplateUrl('templates/gallery-modal.html', {
		scope: $scope,
		animation: 'slide-in-up'
	}).then(function(modal) {
		$scope.modal = modal;
	});

    $scope.closeModal = function() {
		$scope.modal.hide();
    };

    // Cleanup the modal when we're done with it!
    $scope.$on('$destroy', function() {
		$scope.modal.remove();
    });
  
  	$scope.goToSlide = function(row, index) {
  		var imageIndex = (row * $scope.grid) + (index);
  		console.log(imageIndex);
		$scope.modal.show();
		$timeout(function() {
			$ionicSlideBoxDelegate.slide(imageIndex);
		}, 100);
    };

}]);

angular.module('roots.controllers')

.controller('HomeCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicPopup", "Post", "Bookmark", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicPopup, Post, Bookmark) {

	$scope.posts = [];
	$scope.isFetching = true;	
	$scope.shouldRefresh = false;

	$scope.settings = {
		current_page: 1,
		total_items: 1,
		total_pages: 0
	};

	$scope.items_per_page = 3;
	$scope.localStoragePrefix = 'home_'; 
	$scope.useLocalStorage = true; // set to false if you don't want local storage

	$scope.loadMore = function(refresh) {

		if($scope.useLocalStorage === true && $localstorage.getObject( $scope.localStoragePrefix + 'settings' ) !== null ){

			$scope.posts = $localstorage.getObject( $scope.localStoragePrefix + 'items' );
			Post.all($scope.posts);
			$scope.settings = $localstorage.getObject( $scope.localStoragePrefix + 'settings' );
			$scope.isFetching = false;

			if($scope.settings.current_page < $scope.settings.total_pages){
				$scope.getPosts();
			}
		} else {
			$scope.getPosts();
		}
			
	};

	$scope.getPosts = function(){
		Post.get($scope.settings.current_page, $scope.items_per_page).success(function(response){

			$scope.posts = $scope.posts.concat(response.posts);
			Post.all($scope.posts);

			$scope.settings.total_items = response.count_total;	
			$scope.settings.total_pages = response.pages;	
			$scope.settings.current_page++;

			$scope.isFetching = false;
			$scope.$broadcast('scroll.infiniteScrollComplete');
			
			if($scope.useLocalStorage === true){
				$localstorage.setObject($scope.localStoragePrefix + 'items', $scope.posts);
				$localstorage.setObject($scope.localStoragePrefix + 'settings', $scope.settings);
			}

			if($scope.shouldRefresh===true){
				$scope.$broadcast('scroll.refreshComplete');
				$scope.shouldRefresh = false;
			}

		});
	};

	$scope.canBeLoaded = function(){
		if($scope.settings.current_page < $scope.settings.total_pages){
			return true;
		} else {
			return false;
		}
	};

	$scope.doRefresh = function(){
		$localstorage.remove($scope.localStoragePrefix + 'items');
		$localstorage.remove($scope.localStoragePrefix + 'settings');
		$scope.posts = [];
		$scope.settings = {
			current_page: 1,
			total_items: 1,
			total_pages: 0
		};
		$scope.shouldRefresh = true;
		$scope.loadMore();		
	};

	// let's start
	$scope.loadMore();

	$scope.bookmarkThis = function(item){

		Bookmark.save(item);

		var alertPopup = $ionicPopup.alert({
			title: 'Saved!',
			template: 'You can reading it later.'
		});


	};

}]);

angular.module('roots.controllers')

.controller('MapCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$compile", "NgMap", function($scope, $timeout, $rootScope, $sce, $localstorage, $compile, NgMap) {

	NgMap.getMap().then(function(map) {
		$scope.map = map;
	});

	$scope.marker = {
		title: 'title',
		content: 'content'
	};

	$scope.markers = [
		{
			'id': 'marker-1',
			'title' : 'Location #1',
			'content' : 'First Location, lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras a viverra magna',
			'location'  : [40.7112, -74.213]
		}, 
		{
			'id': 'marker-2',
			'title' : 'Location #2',
			'content' : 'Second Location, lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras a viverra magna',
			'location'  : [40.7243, -74.2014]
		}, 
		{
			'id': 'marker-3',
			'title' : 'Location #3',
			'content' : 'Third Location, lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras a viverra magna',
			'location'  : [40.7312, -74.1923]
		}
	];

	$scope.showMarker = function(event, marker){
		$scope.marker = marker;
		$scope.map.showInfoWindow('marker-info', marker.id);
	};


}]);

angular.module('roots.controllers')

.controller('MenuCtrl', ["$scope", "$ionicModal", "$timeout", "$rootScope", "User", function($scope, $ionicModal, $timeout, $rootScope, User) {

	$scope.isLogged = false;

	if(User.isLoggedIn()){
		$scope.isLogged = true;
	}

	$scope.logout = function() {
		User.logout();
	};

}]);

angular.module('roots.controllers')

.controller('PluginsCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicPlatform", "$filter", "$ionicActionSheet", "$cordovaEmailComposer", "$cordovaDatePicker", "$cordovaInAppBrowser", "$cordovaSocialSharing", "$cordovaCamera", "$cordovaBarcodeScanner", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicPlatform, $filter, $ionicActionSheet,
	$cordovaEmailComposer, // Email Composer plugin
	$cordovaDatePicker, // Date Picker Plugin
	$cordovaInAppBrowser, // InAppBrowser Plugin
	$cordovaSocialSharing, // Social Share Plugin
	$cordovaCamera, // Camera Plugin
	$cordovaBarcodeScanner // Barcode Plugin
	) {


	// Email Composer plugin
	var emailOptions = {
		to: 'tim@apple.com',
		cc: 'bill@microsoft.com',
		bcc: ['john@doe.com', 'jane@doe.com'],
		/*
		attachments: [
		  'file://img/logo.png',
		  'res://icon.png',
		  'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',
		  'file://README.pdf'
		],
		*/
		subject: 'Ionic Roots',
		body: 'How are you? Nice greetings from Roots',
		isHtml: true
	};

	$scope.emailComposer = function(){
		console.log('email composer plugin');
		ionic.Platform.ready(function() {
			console.log('email composer plugin getting ready...');
	        $cordovaEmailComposer.open(emailOptions).then(null, function () {
				// user cancelled email
			});
		});
	};
	

	// Date Picker
	var datePickerOptions = {
		date: new Date(),
		mode: 'date', // or 'time'
		minDate: new Date() - 10000,
		allowOldDates: true,
		allowFutureDates: true,
		doneButtonLabel: 'DONE',
		doneButtonColor: '#F2F3F4',
		cancelButtonLabel: 'CANCEL',
		cancelButtonColor: '#000000'
	};

	$scope.pickedDate = 'Pick a date';

	$scope.datePicker = function(){
		console.log('date picker plugin');
		$ionicPlatform.ready(function() {
			console.log('date picker plugin getting ready...');
			$cordovaDatePicker.show(datePickerOptions).then(function(date){

				console.log(date);

				var day   = date.getDate();
				var month   = date.getMonth() + 1;
				var year  = date.getFullYear();

				$scope.pickedDate = $filter('date')(date, 'MMMM d, yyyy');		
			});

		});
	};

	// InAppBrowser Plugin

	var inAppBrowserOptions = {
      location: 'yes',
      clearcache: 'yes',
      toolbar: 'yes'
    };

	$scope.openSite = function(){
		console.log('InAppBrowser plugin');
		$ionicPlatform.ready(function() {

			$cordovaInAppBrowser.open('http://google.com', '_blank', inAppBrowserOptions)
			.then(function(event) {
			// success
			})
			.catch(function(event) {
			// error
			});

		});
	};

	// Camera and Social Share Plugins

	$scope.placeholderImage = 'img/placeholder.jpg';

	$scope.openCamera = function(){

		$ionicPlatform.ready(function() {

			var cameraOptions = {
				quality: 50,
				destinationType: Camera.DestinationType.FILE_URI,
				sourceType: Camera.PictureSourceType.CAMERA,
				allowEdit: false,
				encodingType: Camera.EncodingType.JPEG,
				targetWidth: 800,
				targetHeight: 800,
				popoverOptions: CameraPopoverOptions,
				saveToPhotoAlbum: true,
				correctOrientation:true
			};

			$cordovaCamera.getPicture(cameraOptions).then(function(imageURI) {
				$scope.placeholderImage = imageURI;
				}, function(err) {
					// error
			});

			$cordovaCamera.cleanup().then(function(){}); // only for FILE_URI

		});
	};

	$scope.sharePhoto = function(post){

		$ionicActionSheet.show({
			buttons: [
				{ text: 'Share on Facebook' },
				{ text: 'Share on Twitter' }
			],
			titleText: 'Share this Article',
			cancelText: 'Cancel',
			cancel: function() {
				// add cancel code..
			},
			buttonClicked: function(index) {
				
				var message = 'Check this picture!';

				switch(index) {
				    case 0: // facebook
				    	$ionicPlatform.ready(function() {
					        $cordovaSocialSharing.shareViaFacebook(message, $scope.placeholderImage)
							.then(function(result) { }, function(err) { });
						});
				        break;
				    case 1: // twitter
				    	$ionicPlatform.ready(function() {
					        $cordovaSocialSharing.shareViaTwitter(message, $scope.placeholderImage)
							.then(function(result) { }, function(err) { });
						});
				        break;
				}

				return true;
			}
		});

	};

	// Barcode Plugin

	$scope.scanBarcode = function(){
		$ionicPlatform.ready(function() {
			$cordovaBarcodeScanner
			.scan()
			.then(function(barcodeData) {
				alert('The result was print in the console');
				console.log(barcodeData);
			}, function(error) {
				alert('There was an error, please try again.');
				// An error occurred
			});
		});
	};

	// Admob Plugin

	var ad_units = {
		ios : {
			banner: 'ca-app-pub-xxxxxxx/xxxxxxx', // or DFP format "/6253334/dfp_example_ad"
			interstitial: 'ca-app-pub-xxxxxxx/xxxxxxx'
		},
		android : {
			banner: 'ca-app-pub-xxxxxxx/xxxxxxx', // or DFP format "/6253334/dfp_example_ad"
			interstitial: 'ca-app-pub-xxxxxxx/xxxxxxx'
		}
	};

	// select the right Ad Id according to platform
	var admobid = ( /(android)/i.test(navigator.userAgent) ) ? ad_units.android : ad_units.ios;

	// Let's create the ads but don't show them. 
	$ionicPlatform.ready(function() {

		if (! AdMob ) { console.log( 'admob plugin not ready' ); return; }

	  	if ( AdMob ){
	  		
		  	var admobDefaultOptions = {
		        adSize: 'SMART_BANNER',
		        // width: integer, // valid when set adSize 'CUSTOM'
		        // height: integer, // valid when set adSize 'CUSTOM'
		        position: AdMob.AD_POSITION.BOTTOM_CENTER,
		        // offsetTopBar: false, // avoid overlapped by status bar, for iOS7+
		        bgColor: 'black', // color name, or '#RRGGBB'
		        isTesting: true, // set to true, to receiving test ad for testing purpose
		        autoShow: false // auto show interstitial ad when loaded, set to false if prepare/show
		    };

		    AdMob.setOptions( admobDefaultOptions );		    

			// Let's create a Banner and Interstitial ads
			if(AdMob){
				AdMob.createBanner({ adId:admobid.banner, autoShow: false });

				AdMob.prepareInterstitial({
				    adId: admobid.interstitial,
				    autoShow: false
				});
			}

			// More Examples

			/*
			// It will create a smart banner in bottom center using the default options
			if(AdMob) AdMob.createBanner( admobid.banner );

			// it will display smart banner at top center
			if(AdMob) AdMob.createBanner( {
			    adId:admobid.banner, 
			    position:AdMob.AD_POSITION.TOP_CENTER, 
			    autoShow:true} );

			// or, show a rect ad at bottom in overlap mode
			if(AdMob) AdMob.createBanner( {
			    adId:admobid.banner, 
			    adSize:'MEDIUM_RECTANGLE', 
			    overlap:true, 
			    position:AdMob.AD_POSITION.BOTTOM_CENTER, 
			    autoShow:true} );

			// or, show any size at any position
			if(AdMob) AdMob.createBanner( {
			    adId:admobid.banner, 
			    adSize:'CUSTOM',  width:200, height:200, 
			    overlap:true, 
			    position:AdMob.AD_POSITION.POS_XY, x:100, y:200, 
			    autoShow:true} );
			*/
		}
	});

	$scope.showBanner = function(){
		$ionicPlatform.ready(function() {
			if(AdMob) AdMob.showBanner();
		});
	};

	$scope.hideBanner = function(){
		// If you want to remove it use AdMob.removeBanner();
		$ionicPlatform.ready(function() {
			if(AdMob) AdMob.hideBanner();
		});
	};

	$scope.showInterstitial = function(){
		$ionicPlatform.ready(function() {
			if(AdMob) AdMob.showInterstitial();
		});
	};

}]);

angular.module('roots.controllers')

.controller('PostCtrl', ["$scope", "$ionicModal", "$timeout", "$sce", "$ionicPlatform", "$ionicPopup", "$ionicScrollDelegate", "$ionicActionSheet", "$cordovaSocialSharing", "item", "Comment", "User", function($scope, $ionicModal, $timeout, $sce, $ionicPlatform, $ionicPopup, $ionicScrollDelegate, $ionicActionSheet, $cordovaSocialSharing, item, Comment, User) {

	$scope.item = item;
	$scope.itemContent = $sce.trustAsHtml(item.content);
	$scope.comments = [];
	$scope.theComment = '';
	$scope.isFetching = false;
	$scope.isLogged = User.isLoggedIn();

	var alertPopup;

	$scope.getComments = function(){
		$scope.isFetching = true;
		Comment.getFromPost($scope.item.id, 'post').success(function(response){
			console.log(response);
			$scope.comments = response.posts[0].comments;
			$ionicScrollDelegate.resize();					
			$scope.isFetching = false;
			$scope.theComment = '';
		});
	};

	$scope.sendComment = function(postID){

		$ionicScrollDelegate.scrollBottom(true);
		$scope.isFetching = true;

		Comment.submit($scope.item.id, $scope.theComment).success(function(response){
			
			if(response.status==='pending' || response.status==='ok'){

				$scope.getComments();
			
			} else {
				alertPopup = $ionicPopup.alert({
					title: 'Error',
					template: 'There was an error trying to submit your comment, please try again later.'
				});
			}

		}).error(function(){
			alertPopup = $ionicPopup.alert({
				title: 'Error',
				template: 'There was an error trying to submit your comment, please try again later.'
			});
		});

	};

	// get the comments
	$scope.getComments();

	$scope.sharePost = function(post){

		$ionicActionSheet.show({
			buttons: [
				{ text: 'Share on Facebook' },
				{ text: 'Share on Twitter' },
				{ text: 'Share on Email' }
			],
			titleText: 'Share this Article',
			cancelText: 'Cancel',
			cancel: function() {
				// add cancel code..
			},
			buttonClicked: function(index) {
				
				var message = 'Check out the article: '+post.title;
				var emailMessage = 'Check out the article: '+post.title+' in this link: '+post.url;

				switch(index) {
				    case 0: // facebook
				    	$ionicPlatform.ready(function() {
					        $cordovaSocialSharing.shareViaFacebook(message, null, post.url)
							.then(function(result) { }, function(err) { });
						});
				        break;
				    case 1: // twitter
				    	$ionicPlatform.ready(function() {
					        $cordovaSocialSharing.shareViaTwitter(message, null, post.url)
							.then(function(result) { }, function(err) { });
						});
				        break;
			        case 2: // email
			        	$ionicPlatform.ready(function() {
					        $cordovaSocialSharing.shareViaEmail(emailMessage)
							.then(function(result) { }, function(err) { });
						});
				        break;
				}

				return true;
			}
		});

	};

}]);

angular.module('roots.controllers')

.controller('SearchCtrl', ["$scope", "$timeout", "$rootScope", "$sce", "$localstorage", "$ionicPopup", "Search", "Bookmark", function($scope, $timeout, $rootScope, $sce, $localstorage, $ionicPopup, Search, Bookmark) {

	$scope.posts = [];
	$scope.isFetching = false;	
	$scope.noResults = false;

	$scope.settings = {
		current_page: 1,
		total_items: 1,
		total_pages: 0
	};

	$scope.items_per_page = 10;

	$scope.search = function(query){

		$scope.posts = [];
		$scope.noResults = false;
		$scope.settings = {
			current_page: 1,
			total_items: 1,
			total_pages: 0
		};
		$scope.isFetching = true;
		$scope.keyword = query;
		$scope.getPosts(query);

	};

	$scope.getPosts = function(){

		Search.query($scope.keyword, $scope.settings.current_page, $scope.items_per_page).success(function(response){

			$scope.posts = $scope.posts.concat(response.posts);
			Search.all($scope.posts);

			$scope.settings.total_items = response.count_total;	
			$scope.settings.total_pages = response.pages;	
			$scope.settings.current_page++;

			if($scope.posts.length > 0){
				$scope.noResults = false;
			} else {
				$scope.noResults = true;
			}

			$scope.isFetching = false;
			$scope.$broadcast('scroll.infiniteScrollComplete');			

		});

	};

	$scope.canBeLoaded = function(){
		if($scope.settings.current_page < $scope.settings.total_pages){
			return true;
		} else {
			return false;
		}
	};

	$scope.bookmarkThis = function(item){

		Bookmark.save(item);

		var alertPopup = $ionicPopup.alert({
			title: 'Saved!',
			template: 'You can reading it later.'
		});

	};

}]);

angular.module('roots.controllers')

.controller('WalkthroughCtrl', ["$scope", "$rootScope", "$timeout", "$state", "Walkthrough", function($scope, $rootScope, $timeout, $state, Walkthrough) {

	$scope.goHome = function(){
		console.log('go home');
		Walkthrough.markAsShown();
		$state.go("app.home");	
	};

}]);
